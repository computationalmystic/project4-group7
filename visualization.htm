<!DOCTYPE html>
<html>
<body>

<p>1. Get Repo Group Top 6 Committers<br></p>
<button type="button" onclick="topCommittersChart(25152)">MHS</button>
<button type="button" onclick="topCommittersChart(20)">Rails</button>
<button type="button" onclick="topCommittersChart(21)">Comcast</button>
<button type="button" onclick="topCommittersChart(22)">GraphQL</button>
<button type="button" onclick="topCommittersChart(23)">Netflix</button>
<button type="button" onclick="topCommittersChart(24)">Apache</button>
<button type="button" onclick="topCommittersChart(25151)">Zephyr-RTOS</button>
<button type="button" onclick="topCommittersChart(25150)">CHAOSS Risk Working Group</button>
    
    
<p>2. Get Pull Request Acceptance Rate<br></p>
<!--<button type="button" onclick="pullChart(25152)">MHS</button>-->
<button type="button" onclick="pullChart(20)">Rails</button>
<button type="button" onclick="pullChart(21)">Comcast</button>
<button type="button" onclick="pullChart(22)">GraphQL</button>
<!--<button type="button" onclick="pullChart(23)">Netflix</button>-->
<button type="button" onclick="pullChart(24)">Apache</button>
<button type="button" onclick="pullChart(25151)">Zephyr-RTOS</button>
<button type="button" onclick="pullChart(25150)">CHAOSS Risk Working Group</button>
    

<p>3. Select Fork Count<br></p>
<!--<button type="button" onclick="emptyList(); forkChart(25152);">MHS</button>-->
<button type="button" onclick="emptyList(); forkChart(20);">Rails</button>
<button type="button" onclick="emptyList(); forkChart(21);">Comcast</button>
<button type="button" onclick="emptyList(); forkChart(22);">GraphQL</button>
<!--<button type="button" onclick="emptyList(); forkChart(23);">Netflix</button>-->
<button type="button" onclick="emptyList(); forkChart(24);">Apache</button>
<button type="button" onclick="emptyList(); forkChart(25151);">Zephyr-RTOS</button>
<button type="button" onclick="emptyList(); forkChart(25150);">CHAOSS Risk Working Group</button>
<br>
<select id="mySelect" size="10">
</select>
<button type="button" onclick="displayForks()">Select</button>

<div id="chartContainer" style="height: 370px; width: 100%;"></div>
<script src="https://canvasjs.com/assets/script/canvasjs.min.js"> </script>
    
    
<p id="demo"></p>


<script>
var repo_group_id;
var repo_id;
function loadRepoId(num) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      getRepoId (this.responseText);
    }
  };
  xhttp.open("GET", "http://augur.osshealth.io:5000/api/unstable/repo-groups/"+ num +"/repos", true);
  xhttp.send();
}
    
function getRepoId (txt) {
    var obj = JSON.parse(txt);
    var out = '';
    
    for (i = 0; i < obj.length; i++){
        if (obj[i].commits_all_time > 0) {
            out += obj[i].repo_id + "   " + obj[i].repo_name + "<br>";
        }
    }
        
    document.getElementById("demo").innerHTML = out ;
}
    
function loadRepoGroupId() {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      getRepoGroupId (this.responseText);
    }
  };
  xhttp.open("GET", "http://augur.osshealth.io:5000/api/unstable/repo-groups", true);
  xhttp.send();
}
    
    
function getRepoGroupId (txt) {
    var obj = JSON.parse(txt);
    var out = '';
    
    for (i = 0; i < obj.length; i++){
        out += obj[i].repo_group_id + "         "
 + obj[i].rg_name + "<br>";
    }
        
    document.getElementById("demo").innerHTML = out;
}   
    
    
    
    
function loadRepoGroupTopCommitters(num) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      getRepoGroupTopCommitters (this.responseText);
    }
  };
  xhttp.open("GET", "http://augur.osshealth.io:5000/api/unstable/repo-groups/" + num + "/top-committers", true);
  xhttp.send();
}
    
    
function getRepoGroupTopCommitters (txt) {
    var obj = JSON.parse(txt);
    var out = '';
    
    for (i = 0; i < obj.length; i++){
        if (i < 6) {
            out += obj[i].email + "         " + obj[i].commits + "<br>";
        }
    }
        
    document.getElementById("demo").innerHTML = out;
} 
    
    
    
    
function loadRepoGroupPull(num) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      getRepoGroupPull (this.responseText);
    }
  };
  xhttp.open("GET", "http://augur.osshealth.io:5000/api/unstable/repo-groups/" + num + "/pull-request-acceptance-rate", true);
  xhttp.send();
}
    
    
function getRepoGroupPull (txt) {
    var obj = JSON.parse(txt);
    var out = '';
    
    for (i = 0; i < obj.length; i++){
        if (i < obj.length) {
            out += obj[i].date + "         " + obj[i].rate + "<br>";
        }
    }
        
    document.getElementById("demo").innerHTML = out;
} 
    
var forkObj;
function loadRepoGroupForkCount(num) {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            getRepoGroupForkCount (this.responseText);
        } 
    };
    xhttp.open("GET", "http://augur.osshealth.io:5000/api/unstable/repo-groups/" + num + "/fork-count", true);
    xhttp.send();
}  
    
function getRepoGroupForkCount(txt){
    
    var obj = JSON.parse(txt);
    forkObj = obj;
    var out = '';
    
    for (i = 0; i < obj.length; i++){
        if (i <  obj.length) {
//            out += obj[i].repo_id + "         " + obj[i].repo_name + "<br>";
            addSelect(obj[i].repo_name);
        }
    }
        
//    document.getElementById("demo").innerHTML = obj.length;
}
    
function addSelect(txt) {
    var x = document.getElementById("mySelect");
    var option = document.createElement("option");
    option.text = txt;
    x.add(option);
}
    
function emptyList() {
    var x = document.getElementById("mySelect");
    while(x.length != 0){
        x.remove(x.length-1);
    }
}   
function displayForks(){
    var x = document.getElementById("mySelect");
    document.getElementById("demo").innerHTML = forkObj[x.selectedIndex].forks;
}

function topCommittersChart(num) {

var chart = new CanvasJS.Chart("chartContainer", {
	theme: "light1", 
	animationEnabled: true, 		
	title:{
		text: "Pull Request Acceptance Rate"
	},
	data: [
	{
		// Change type to "bar", "area", "spline", "column",etc.
		type: "pie",
		dataPoints: [
			{ label: "apple",  y: 10  },
			{ label: "orange", y: 15  },
			{ label: "banana", y: 25  },
			{ label: "mango",  y: 30  },
			{ label: "grape",  y: 28  }
		]
	}
	]
});
chart.render();
}

function pullChart(num) {

var chart = new CanvasJS.Chart("chartContainer", {
	theme: "light1", 
	animationEnabled: true, 		
	title:{
		text: "Pull Requests"
	},
	data: [
	{
		// Change type to "bar", "area", "spline", "column",etc.
		type: "bar",
		dataPoints: [
			{ label: "apple",  y: 10  },
			{ label: "orange", y: 15  },
			{ label: "banana", y: 25  },
			{ label: "mango",  y: 30  },
			{ label: "grape",  y: 28  }
		]
	}
	]
});
chart.render();
}

function forkChart(num) {

var chart = new CanvasJS.Chart("chartContainer", {
	theme: "light1", 
	animationEnabled: true, 		
	title:{
		text: "Fork Count"
	},
	data: [
	{
		// Change type to "bar", "area", "spline", "column",etc.
		type: "column",
		dataPoints: [
			{ label: "apple",  y: 10  },
			{ label: "orange", y: 15  },
			{ label: "banana", y: 25  },
			{ label: "mango",  y: 30  },
			{ label: "grape",  y: 28  }
		]
	}
	]
});
chart.render();
}
    
</script>

</body>
</html>